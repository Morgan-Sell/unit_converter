import pytest
from flask_wtf import FlaskForm
from wtforms import DecimalField, SelectField, SubmitField

from src.config import (
    LENGTH_UNIT_CHOICES,
    TEMPERATURE_UNIT_CHOICES,
    WEIGHT_UNIT_CHOICES,
)
from src.forms import LengthForm, TemperatureForm, WeightForm


# <-- LengthForm Test Cases -->
def test_length_form_fields(app_context):
    # Initialize form without data
    form = LengthForm()

    # Assert that each field is present and has the correct label
    assert isinstance(form.value, DecimalField)
    assert form.value.label.text == "Enter length to convert:"

    assert isinstance(form.from_unit, SelectField)
    assert form.from_unit.label.text == "Unit to convert from:"
    assert form.from_unit.choices == LENGTH_UNIT_CHOICES  # Check choices

    assert isinstance(form.to_unit, SelectField)
    assert form.to_unit.label.text == "Unit to convert to:"
    assert form.to_unit.choices == LENGTH_UNIT_CHOICES  # Check choices

    assert isinstance(form.convert, SubmitField)
    assert form.convert.label.text == "Convert"


def test_length_form_validation(app_context):
    # Test form with valid data
    form = LengthForm(
        data={
            "value": "100.0",
            "from_unit": "m",
            "to_unit": "cm",
            "csrf_token": (
                FlaskForm().csrf_token._value()
            ),  # generated by app.secret_key
        }
    )
    assert form.validate() is True  # Form should validate successfully

    # Test form with missing 'value'
    form_missing_value = LengthForm(data={"from_unit": "m", "to_unit": "cm"})
    assert form_missing_value.validate() is False
    assert "This field is required." in form_missing_value.value.errors

    # Test form with missing 'from_unit'
    form_missing_from_unit = LengthForm(data={"value": "100.0", "to_unit": "cm"})
    assert form_missing_from_unit.validate() is False
    assert "This field is required." in form_missing_from_unit.from_unit.errors

    # Test form with missing 'to_unit'
    form_missing_to_unit = LengthForm(data={"value": "100.0", "from_unit": "m"})
    assert form_missing_to_unit.validate() is False
    assert "This field is required." in form_missing_to_unit.to_unit.errors


# <-- WeightForm Test Cases -->
def test_weight_form_fields(app_context):
    # Initialize form without data
    form = WeightForm()

    # Assert each field exists and has the correct label
    assert isinstance(form.value, DecimalField)
    assert form.value.label.text == "Enter weight to convert:"

    assert isinstance(form.from_unit, SelectField)
    assert form.from_unit.label.text == "Unit to convert from:"
    assert form.from_unit.choices == WEIGHT_UNIT_CHOICES  # Ensure correct choices

    assert isinstance(form.to_unit, SelectField)
    assert form.to_unit.label.text == "Unit to convert to:"
    assert form.to_unit.choices == WEIGHT_UNIT_CHOICES  # Ensure correct choices

    assert isinstance(form.convert, SubmitField)
    assert form.convert.label.text == "Convert"


def test_weight_form_validation(app_context):
    # Test form with valid data
    form = WeightForm(
        data={
            "value": "100.0",
            "from_unit": "kg",
            "to_unit": "lb",
            "csrf_token": (
                FlaskForm().csrf_token._value()
            ),  # generated by app.secret_key
        }
    )
    assert form.validate() is True  # Should pass validation

    # Test form with missing 'value'
    form_missing_value = WeightForm(data={"from_unit": "kg", "to_unit": "lb"})
    assert form_missing_value.validate() is False
    assert "This field is required." in form_missing_value.value.errors

    # Test form with missing 'from_unit'
    form_missing_from_unit = WeightForm(data={"value": "100.0", "to_unit": "lb"})
    assert form_missing_from_unit.validate() is False
    assert "This field is required." in form_missing_from_unit.from_unit.errors

    # Test form with missing 'to_unit'
    form_missing_to_unit = WeightForm(data={"value": "100.0", "from_unit": "kg"})
    assert form_missing_to_unit.validate() is False
    assert "This field is required." in form_missing_to_unit.to_unit.errors
